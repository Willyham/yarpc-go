// Code generated by protoc-gen-gogo.
// source: yarpcproto/yarpc.proto
// DO NOT EDIT!

// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/*
Package yarpcproto is a generated protocol buffer package.

It is generated from these files:
	yarpcproto/yarpc.proto

It has these top-level messages:
	Oneway
*/
package yarpcproto

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ErrorType represents the type of error for an RPC call.
//
// Sometimes multiple error codes may apply. Services should return
// the most specific error code that applies. For example, prefer
// `OUT_OF_RANGE` over `FAILED_PRECONDITION` if both codes apply.
// Similarly prefer `NOT_FOUND` or `ALREADY_EXISTS` over `FAILED_PRECONDITION`.
type ErrorType int32

const (
	// Not an error; returned on success
	//
	// HTTP Mapping: 200 OK
	// Google API Mapping: Code.OK
	ERROR_TYPE_NONE ErrorType = 0
	// The operation was cancelled, typically by the caller.
	//
	// HTTP Mapping: 499 Client Closed Request
	// Google API Mapping: Code.CANCELLED
	ERROR_TYPE_CANCELLED ErrorType = 1
	// Unknown error. For example, this error may be returned when
	// a `Status` value received from another address space belongs to
	// an error space that is not known in this address space. Also
	// errors raised by APIs that do not return enough error information
	// may be converted to this error.
	//
	// HTTP Mapping: 500 Internal Server Error
	// Google API Mapping: Code.UNKNOWN
	ERROR_TYPE_UNKNOWN ErrorType = 2
	// The client specified an invalid argument. Note that this differs
	// from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments
	// that are problematic regardless of the state of the system
	// (e.g., a malformed file name).
	//
	// HTTP Mapping: 400 Bad Request
	// Google API Mapping: Code.INVALID_ARGUMENT
	ERROR_TYPE_INVALID_ARGUMENT ErrorType = 3
	// The deadline expired before the operation could complete. For operations
	// that change the state of the system, this error may be returned
	// even if the operation has completed successfully. For example, a
	// successful response from a server could have been delayed long
	// enough for the deadline to expire.
	//
	// HTTP Mapping: 504 Gateway Timeout
	// Google API Mapping: Code.DEADLINE_EXCEEDED
	ERROR_TYPE_DEADLINE_EXCEEDED ErrorType = 4
	// Some requested entity (e.g., file or directory) was not found.
	// For privacy reasons, this code *may* be returned when the client
	// does not have the access rights to the entity, though such usage is
	// discouraged.
	//
	// HTTP Mapping: 404 Not Found
	// Google API Mapping: Code.NOT_FOUND
	ERROR_TYPE_NOT_FOUND ErrorType = 5
	// The entity that a client attempted to create (e.g., file or directory)
	// already exists.
	//
	// HTTP Mapping: 409 Conflict
	// Google API Mapping: Code.ALREADY_EXISTS
	ERROR_TYPE_ALREADY_EXISTS ErrorType = 6
	// The caller does not have permission to execute the specified
	// operation. `PERMISSION_DENIED` must not be used for rejections
	// caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
	// instead for those errors). `PERMISSION_DENIED` must not be
	// used if the caller can not be identified (use `UNAUTHENTICATED`
	// instead for those errors).
	//
	// HTTP Mapping: 403 Forbidden
	// Google API Mapping: Code.PERMISSION_DENIED
	ERROR_TYPE_PERMISSION_DENIED ErrorType = 7
	// Some resource has been exhausted, perhaps a per-user quota, or
	// perhaps the entire file system is out of space.
	//
	// HTTP Mapping: 429 Too Many Requests
	// Google API Mapping: Code.RESOURCE_EXHAUSTED
	ERROR_TYPE_RESOURCE_EXHAUSTED ErrorType = 8
	// The operation was rejected because the system is not in a state
	// required for the operation's execution. For example, the directory
	// to be deleted is non-empty, an rmdir operation is applied to
	// a non-directory, etc.
	//
	// Service implementors can use the following guidelines to decide
	// between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
	//  (a) Use `UNAVAILABLE` if the client can retry just the failing call.
	//  (b) Use `ABORTED` if the client should retry at a higher level
	//      (e.g., restarting a read-modify-write sequence).
	//  (c) Use `FAILED_PRECONDITION` if the client should not retry until
	//      the system state has been explicitly fixed. E.g., if an "rmdir"
	//      fails because the directory is non-empty, `FAILED_PRECONDITION`
	//      should be returned since the client should not retry unless
	//      the files are deleted from the directory.
	//
	// HTTP Mapping: 400 Bad Request
	// Google API Mapping: Code.FAILED_PRECONDITION
	ERROR_TYPE_FAILED_PRECONDITION ErrorType = 9
	// The operation was aborted, typically due to a concurrency issue such as
	// a sequencer check failure or transaction abort.
	//
	// See the guidelines above for deciding between `FAILED_PRECONDITION`,
	// `ABORTED`, and `UNAVAILABLE`.
	//
	// HTTP Mapping: 409 Conflict
	// Google API Mapping: Code.ABORTED
	ERROR_TYPE_ABORTED ErrorType = 10
	// The operation was attempted past the valid range. E.g., seeking or
	// reading past end-of-file.
	//
	// Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
	// be fixed if the system state changes. For example, a 32-bit file
	// system will generate `INVALID_ARGUMENT` if asked to read at an
	// offset that is not in the range [0,2^32-1], but it will generate
	// `OUT_OF_RANGE` if asked to read from an offset past the current
	// file size.
	//
	// There is a fair bit of overlap between `FAILED_PRECONDITION` and
	// `OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific
	// error) when it applies so that callers who are iterating through
	// a space can easily look for an `OUT_OF_RANGE` error to detect when
	// they are done.
	//
	// HTTP Mapping: 400 Bad Request
	// Google API Mapping: Code.OUT_OF_RANGE
	ERROR_TYPE_OUT_OF_RANGE ErrorType = 11
	// The operation is not implemented or is not supported/enabled in this
	// service.
	//
	// HTTP Mapping: 501 Not Implemented
	// Google API Mapping: Code.UNIMPLEMENTED
	ERROR_TYPE_UNIMPLEMENTED ErrorType = 12
	// Internal errors. This means that some invariants expected by the
	// underlying system have been broken. This error code is reserved
	// for serious errors.
	//
	// HTTP Mapping: 500 Internal Server Error
	// Google API Mapping: Code.INTERNAL
	ERROR_TYPE_INTERNAL ErrorType = 13
	// The service is currently unavailable. This is most likely a
	// transient condition, which can be corrected by retrying with
	// a backoff.
	//
	// See the guidelines above for deciding between `FAILED_PRECONDITION`,
	// `ABORTED`, and `UNAVAILABLE`.
	//
	// HTTP Mapping: 503 Service Unavailable
	// Google API Mapping: Code.UNAVAILABLE
	ERROR_TYPE_UNAVAILABLE ErrorType = 14
	// Unrecoverable data loss or corruption.
	//
	// HTTP Mapping: 500 Internal Server Error
	// Google API Mapping: Code.DATA_LOSS
	ERROR_TYPE_DATA_LOSS ErrorType = 15
	// The request does not have valid authentication credentials for the
	// operation.
	//
	// HTTP Mapping: 401 Unauthorized
	// Google API Mapping: Code.UNAUTHENTICATED
	ERROR_TYPE_UNAUTHENTICATED ErrorType = 16
	// Application error. This will typically be accompianed by a user-defined
	// error name across the wire.
	//
	// HTTP Mapping: 500 Internal Server Error
	// Google API Mapping: Code.UNKNOWN
	ERROR_TYPE_APPLICATION ErrorType = 17
)

var ErrorType_name = map[int32]string{
	0:  "ERROR_TYPE_NONE",
	1:  "ERROR_TYPE_CANCELLED",
	2:  "ERROR_TYPE_UNKNOWN",
	3:  "ERROR_TYPE_INVALID_ARGUMENT",
	4:  "ERROR_TYPE_DEADLINE_EXCEEDED",
	5:  "ERROR_TYPE_NOT_FOUND",
	6:  "ERROR_TYPE_ALREADY_EXISTS",
	7:  "ERROR_TYPE_PERMISSION_DENIED",
	8:  "ERROR_TYPE_RESOURCE_EXHAUSTED",
	9:  "ERROR_TYPE_FAILED_PRECONDITION",
	10: "ERROR_TYPE_ABORTED",
	11: "ERROR_TYPE_OUT_OF_RANGE",
	12: "ERROR_TYPE_UNIMPLEMENTED",
	13: "ERROR_TYPE_INTERNAL",
	14: "ERROR_TYPE_UNAVAILABLE",
	15: "ERROR_TYPE_DATA_LOSS",
	16: "ERROR_TYPE_UNAUTHENTICATED",
	17: "ERROR_TYPE_APPLICATION",
}
var ErrorType_value = map[string]int32{
	"ERROR_TYPE_NONE":                0,
	"ERROR_TYPE_CANCELLED":           1,
	"ERROR_TYPE_UNKNOWN":             2,
	"ERROR_TYPE_INVALID_ARGUMENT":    3,
	"ERROR_TYPE_DEADLINE_EXCEEDED":   4,
	"ERROR_TYPE_NOT_FOUND":           5,
	"ERROR_TYPE_ALREADY_EXISTS":      6,
	"ERROR_TYPE_PERMISSION_DENIED":   7,
	"ERROR_TYPE_RESOURCE_EXHAUSTED":  8,
	"ERROR_TYPE_FAILED_PRECONDITION": 9,
	"ERROR_TYPE_ABORTED":             10,
	"ERROR_TYPE_OUT_OF_RANGE":        11,
	"ERROR_TYPE_UNIMPLEMENTED":       12,
	"ERROR_TYPE_INTERNAL":            13,
	"ERROR_TYPE_UNAVAILABLE":         14,
	"ERROR_TYPE_DATA_LOSS":           15,
	"ERROR_TYPE_UNAUTHENTICATED":     16,
	"ERROR_TYPE_APPLICATION":         17,
}

func (ErrorType) EnumDescriptor() ([]byte, []int) { return fileDescriptorYarpc, []int{0} }

// Oneway is the return type to use for an rpc method if
// the method should be generated as oneway.
type Oneway struct {
	Ack bool `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (m *Oneway) Reset()                    { *m = Oneway{} }
func (*Oneway) ProtoMessage()               {}
func (*Oneway) Descriptor() ([]byte, []int) { return fileDescriptorYarpc, []int{0} }

func (m *Oneway) GetAck() bool {
	if m != nil {
		return m.Ack
	}
	return false
}

func init() {
	proto.RegisterType((*Oneway)(nil), "uber.yarpc.Oneway")
	proto.RegisterEnum("uber.yarpc.ErrorType", ErrorType_name, ErrorType_value)
}
func (x ErrorType) String() string {
	s, ok := ErrorType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Oneway) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Oneway)
	if !ok {
		that2, ok := that.(Oneway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Ack != that1.Ack {
		return false
	}
	return true
}
func (this *Oneway) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&yarpcproto.Oneway{")
	s = append(s, "Ack: "+fmt.Sprintf("%#v", this.Ack)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringYarpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Oneway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Oneway) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ack {
		dAtA[i] = 0x8
		i++
		if m.Ack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Yarpc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Yarpc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintYarpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Oneway) Size() (n int) {
	var l int
	_ = l
	if m.Ack {
		n += 2
	}
	return n
}

func sovYarpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozYarpc(x uint64) (n int) {
	return sovYarpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Oneway) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Oneway{`,
		`Ack:` + fmt.Sprintf("%v", this.Ack) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringYarpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Oneway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYarpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Oneway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Oneway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ack = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipYarpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYarpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYarpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYarpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYarpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYarpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthYarpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowYarpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipYarpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthYarpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYarpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("yarpcproto/yarpc.proto", fileDescriptorYarpc) }

var fileDescriptorYarpc = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xbd, 0x72, 0x13, 0x31,
	0x10, 0xb6, 0x48, 0x30, 0xc9, 0x02, 0x89, 0x50, 0x18, 0xc7, 0x38, 0x89, 0x08, 0xa9, 0x18, 0x0a,
	0x53, 0xf0, 0x04, 0xf2, 0x69, 0x9d, 0x08, 0xe4, 0xd5, 0x8d, 0x4e, 0x17, 0x12, 0x1a, 0x8d, 0xe3,
	0x71, 0xc5, 0x80, 0x3d, 0x37, 0x30, 0x8c, 0x3b, 0x1e, 0x81, 0x86, 0x77, 0xe0, 0x51, 0x28, 0x53,
	0x52, 0xe2, 0xa3, 0xa1, 0xcc, 0x23, 0x64, 0xce, 0x4d, 0xce, 0x57, 0x69, 0xe7, 0xfb, 0xd1, 0x37,
	0xfb, 0xcd, 0x42, 0x67, 0x31, 0x2e, 0xe6, 0x93, 0x79, 0x31, 0xfb, 0x32, 0x7b, 0xbd, 0x1a, 0xfb,
	0xab, 0x59, 0xc0, 0xd7, 0xab, 0x69, 0xd1, 0x5f, 0x21, 0x27, 0x3d, 0x68, 0xbb, 0xcf, 0xd3, 0x6f,
	0xe3, 0x85, 0xe0, 0xb0, 0x31, 0x9e, 0x7c, 0xec, 0xb2, 0x63, 0xf6, 0x72, 0xcb, 0x57, 0xe3, 0xab,
	0x9f, 0x9b, 0xb0, 0x8d, 0x45, 0x31, 0x2b, 0xc2, 0x62, 0x3e, 0x15, 0x7b, 0xb0, 0x8b, 0xde, 0x3b,
	0x1f, 0xc3, 0x65, 0x8a, 0x91, 0x1c, 0x21, 0x6f, 0x89, 0x2e, 0x3c, 0xad, 0x81, 0x89, 0xa2, 0x04,
	0xad, 0x45, 0xcd, 0x99, 0xe8, 0x80, 0xa8, 0x31, 0x39, 0xbd, 0x23, 0xf7, 0x9e, 0xf8, 0x3d, 0xf1,
	0x1c, 0x0e, 0x6a, 0xb8, 0xa1, 0x73, 0x65, 0x8d, 0x8e, 0xca, 0x9f, 0xe6, 0x23, 0xa4, 0xc0, 0x37,
	0xc4, 0x31, 0x1c, 0xd6, 0x04, 0x1a, 0x95, 0xb6, 0x86, 0x30, 0xe2, 0x45, 0x82, 0xa8, 0x51, 0xf3,
	0xcd, 0x46, 0x28, 0xb9, 0x10, 0x87, 0x2e, 0x27, 0xcd, 0xef, 0x8b, 0x23, 0x78, 0x56, 0x63, 0x94,
	0xf5, 0xa8, 0xf4, 0x65, 0xc4, 0x0b, 0x93, 0x85, 0x8c, 0xb7, 0x1b, 0x5f, 0xa7, 0xe8, 0x47, 0x26,
	0xcb, 0x8c, 0xa3, 0xa8, 0x91, 0x0c, 0x6a, 0xfe, 0x40, 0xbc, 0x80, 0xa3, 0x9a, 0xc2, 0x63, 0xe6,
	0x72, 0x9f, 0x54, 0xe1, 0x67, 0x2a, 0xcf, 0x02, 0x6a, 0xbe, 0x25, 0x4e, 0x40, 0xd6, 0x24, 0x43,
	0x65, 0x2c, 0xea, 0x98, 0x7a, 0x4c, 0x1c, 0x69, 0x13, 0x8c, 0x23, 0xbe, 0xdd, 0x58, 0x5e, 0x0d,
	0x9c, 0xaf, 0xbc, 0x20, 0x0e, 0x60, 0xbf, 0x86, 0xbb, 0x3c, 0x44, 0x37, 0x8c, 0x5e, 0xd1, 0x29,
	0xf2, 0x87, 0xe2, 0x10, 0xba, 0x6b, 0x8d, 0x99, 0x51, 0x6a, 0xb1, 0x2a, 0x05, 0x35, 0x7f, 0x24,
	0xf6, 0x61, 0x6f, 0xad, 0xb7, 0x80, 0x9e, 0x94, 0xe5, 0x8f, 0x45, 0x0f, 0x3a, 0x6b, 0x36, 0x75,
	0xae, 0x8c, 0x55, 0x03, 0x8b, 0x7c, 0xa7, 0xd1, 0x94, 0x56, 0x41, 0x45, 0xeb, 0xb2, 0x8c, 0xef,
	0x0a, 0x09, 0xbd, 0x75, 0x57, 0x1e, 0xce, 0x90, 0x82, 0x49, 0x54, 0x15, 0xc7, 0x1b, 0xbf, 0xaa,
	0x34, 0xb5, 0x15, 0x55, 0x6d, 0xf7, 0x64, 0xf0, 0xf6, 0x7a, 0x29, 0x5b, 0x7f, 0x96, 0xb2, 0x75,
	0xb3, 0x94, 0xec, 0x7b, 0x29, 0xd9, 0xaf, 0x52, 0xb2, 0xdf, 0xa5, 0x64, 0xd7, 0xa5, 0x64, 0x7f,
	0x4b, 0xc9, 0xfe, 0x97, 0xb2, 0x75, 0x53, 0x4a, 0xf6, 0xe3, 0x9f, 0x6c, 0xc1, 0xce, 0x64, 0xf6,
	0xa9, 0x7f, 0x77, 0x71, 0x29, 0xfb, 0x00, 0x77, 0x77, 0x79, 0xd5, 0x5e, 0x3d, 0x6f, 0x6e, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xa9, 0x61, 0xab, 0xa4, 0xac, 0x02, 0x00, 0x00,
}
